unbind r
bind r source-file ~/.tmux.conf
# set -g @plugin 'tmux-plugins/tpm'

set -g prefix C-b

set -g mouse on
set -s extended-keys on

set-option -g status-position top

set-option -g status-style bg=default
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
set-environment -g COLORTERM "truecolor"

wl_sep=""
wr_sep=""
transparent="default"
wfg="#1DA0D8"
wfg_inactive="#1883b7"
wbg="#1D61D9"
wbg_inactive="#081d41"
focused_color="#ffffff"

#######################
#     Left Status     #
#######################
set -g window-status-current-format "#[fg=${wbg}]${wl_sep}#[bg=${wbg}]#[fg=${focused_color}]#{b:pane_current_path}#[fg=${wbg},bg=${transparent}]${wr_sep}"
set -g window-status-format "#[fg=${wbg_inactive}]${wl_sep}#[bg=${wbg_inactive}]#[fg=${wfg_inactive}]#{b:pane_current_path}#[fg=${wbg_inactive},bg=${transparent}]${wr_sep}"
set -g status-left " #[fg=${wbg},bg=default,bold]#{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S  "

#######################
#     Right Status    #
#######################
set -g status-right "%I:%M:%S %p %m/%d/%Y   #[range=user|min]#[norange]          "
bind -Troot MouseDown1Status if -F '#{==:#{mouse_status_range},window}' {
    select-window
} {
    if -F '#{==:#{mouse_status_range},min}' {
      next-window
        # send-keys C-S-Q:
    }
}
set -g status-interval 1

bind v split-window -h -c '#{pane_current_path}'
bind h split-window -c '#{pane_current_path}'

bind-key -n C-Tab next-window
bind-key -n C-S-Tab previous-window
bind-key t new-window -c '#{pane_current_path}'

# bind-key c new-window -c '#{pane_current_path}'

# #######################
# #    SMART SPLITS     #
# #######################
#
# # '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# # and unset when Neovim exits or suspends; note that this means you'll probably
# # not want to lazy-load smart-splits.nvim, as the variable won't be set until
# # the plugin is loaded
#
# # Smart pane switching with awareness of Neovim splits.
# bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
# bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
# bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
# bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'
#
# # Smart pane resizing with awareness of Neovim splits.
# bind-key -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h' 'resize-pane -L 3'
# bind-key -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j' 'resize-pane -D 3'
# bind-key -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k' 'resize-pane -U 3'
# bind-key -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l' 'resize-pane -R 3'
#
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l








run '~/.tmux/plugins/tpm/tpm'
